###ZooKeeper基本介绍：
1.ZooKeeper 提供一个层次化的目录结构，命名符合常规文件系统规范。
2.每个节点在ZooKeeper 中叫Znode，它有唯一的的路径标识。
3.Znode有两种类型，persistent，ephemeral，节点Znode可以包含数据和子节点。ephemeral不能包含子节点。
4.Znode中数据可以有多个版本。
5.客户端应用可以在节点上设置监视器（Watcher），一旦节点数据被修改，就会广播给各个客户端。
6.节点Znode不支持部分读写，而是一次性完整读写。强一致性。要么成功，要么失败。
7.Znode类型在创建时确定类型，并且之后不能修改。
8.Znode有四种形式的目录节点，PERSISTENT,PERSISTENT_SEQUENTIAL,EPHEMERAL,EPHEMERAL_SEQUENTIAL
9.实时性：ZooKeeper不能保证两个客户端同时得到刚刚更新的数据，如果需要最新数据，应该在读数据之前调用sync()接口。
10.写数据，如果一半以上的ZooKeeper节点写好了，则数据写好。

###ZooKeeper应用场景：
1.按照层次结构，组织服务，统一命名服务。对应用服务进行统一命名，通过名称来获取资源或服务地址等信息，比如DNS解析(域名对应IP:Port)。
2.配置管理。
a.分布式环境下，需要配置文件管理和同步。
1).一个集群中，所有节点的配置信息是一致的。
2).对配置文件修改后，能快速同步到各个节点。
b.配置管理实现。
将配置信息写入ZooKeeper上的一个Znode，各个client节点监听这个Znode，一旦Znode中数据被修改，ZooKeeper将通知各个client节点，client节点可以去把数据拉下来。
3.集群管理。
a.分布式环境中，需要实时掌握节点状态，根据节点状态进行调整。
b.将节点信息写入ZooKeeper上的一个Znode，监听这个Znode获取它实时状态变化。
HBase中Master状态监控与选举。有多个Master，启动时向ZooKeeper注册，Master挂掉，ZooKeeper重新选举一个新的Master。
Region Server启动时，向ZooKeeper注册，创建临时节点，如果一个Region Server挂掉，这个节点会失去，ZooKeeper知道会通知Master，Master会把Region Server上数据转移到其他Region Server上。
4.分布式通知与协调
a.分布式环境中，经常存在一个服务需要知道它所管理的子服务的状态。
NameNode需要知道DataNode的状态；ResourceManager需要知道NodeManager的状态。
b.ZooKeeper可以实现心跳监测机制（每次心跳Znode都会发生改变），实现信息推送，相当于一个发布订阅模式。
5.分布式锁
ZooKeeper强一致性（多个client同时创建Znode，只有一个client创建成功），锁独占性，控制锁的时序。
6.分布式队列
a.一个队列的成员都聚齐时，这个队列才可用，否则一直等待所有成员到达，这是同步队列。
一个job由多个task组成，只有所有任务完成后，job才运行完成。可为job创建一个/job目录，在该目录下，为每个完成的task创建一个临时Znode，一旦临时Znode数目达到task总数，表明job完成。
b.按照FIFO方式，例如实现生产者和消费者模型。

###ZooKeeper配置：
server.1=nimbus:2888:3888
server.2=slave1:2888:3888
server.3=slave2:2888:3888
server.4=slave3:2888:3888:observer
server.5=slave4:2888:3888:observer

observer是观察者，在服务器配置上要有一行声明配置：
peerType=observer
server.myid，在dataDir下面创建myid文件，并写入数字。

把server.3停止，集群可用，把server.2也停止，集群只有server.1在工作，集群不可用（observer一样不可用），再把server.2启动，集群节点数>=2，又可用了。
